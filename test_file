
void SHMemoryManager_test1(){
    SHMemoryManager shm(100000);
    cout<<shm.get_name()<<" generated successfuly\n";
    int * ptr = static_cast<int*>(shm.allocate(sizeof(int)*100));
    offset_ptr<int> * ofptr =static_cast<offset_ptr<int> *>(shm.allocate(sizeof(offset_ptr<int>)));
    *ofptr = ptr;
    (*ofptr)[10]=20;
    cout<<(*ofptr)[10]<<endl;
    int * ptr2 = static_cast<int*>(shm.grow(reinterpret_cast<void*>(ptr),sizeof(int)*200));
    *ofptr = ptr2;
    
    (*ofptr)[10]=20;
    cout<<(*ofptr)[10]<<endl;
}

void GNGDatabase_test1(){
    GNGDatabaseSimple<3> myDatabase;
    double b[3]={3,4,5};
    double c[3]={4,5,6};
    myDatabase.addExample(new GNGExample<3>(&b[0]));
    myDatabase.addExample(new GNGExample<3>(&c[0]));
    
    GNGExample<3> const * ex = myDatabase.drawExample();
    
    cout<<ex->position[0]<<endl;

    ex = myDatabase.drawExample();
    
    cout<<ex->position[0]<<endl;

    ex = myDatabase.drawExample();
    
    cout<<ex->position[0]<<endl;    
}

void ExtGraphNodeManager_test1(){
    
    
    SHMemoryManager shm(100000);
    Node::mm = & shm;
    ExtGraphNodeManager<Node,Edge,std::vector<Edge> > egnm(1000);
    
    egnm.newNode();
    egnm[0]->edges->push_back(2);
    egnm.newNode();
    
    cout<<egnm.reportPool()<<endl;
}
void ExtGraphNodeManager_test2(){
    SHMemoryManager shm(100000);
    Node::mm = & shm;
    ExtGraphNodeManager<Node, Edge,std::vector< Edge > > egnm(1000);
    
    egnm.newNode();
    egnm[0]->edges->push_back(2);
    egnm.newNode();
    egnm.newNode();
    egnm.deleteNode(1);
    egnm.deleteNode(2);
    egnm.newNode();
    egnm.newNode();
    egnm[0]->edges->push_back(3);
    cout<<egnm.reportPool(true)<<endl;
}

void ExtGraphNodeManager_test_grow(){
    SHMemoryManager shm(sizeof(Node)*200000);
    Node::mm = & shm;
    ExtGraphNodeManager<Node, Edge, std::vector< Edge > > egnm(5);
    
    cout<<"Wielkosc node'a:"<<sizeof(Node)<<endl;
    
    cout<<"Obiekt stworzony\n";
    
    
    egnm.newNode();
    
  
    
    egnm.newNode();
    egnm.newNode();
    egnm.deleteNode(1);
    egnm.deleteNode(2);
    egnm.newNode();
    egnm.newNode();
    egnm.addDEdge(0,2);
    egnm.addDEdge(0,3);
    
    egnm.newNode();
    egnm.newNode();
    egnm.newNode();
    egnm.newNode();
    
    
    
    cout<<egnm.reportPool(true)<<endl;
    
    cout<<dbg.report(2)<<endl;
    
    Edge * it = egnm.getFirstEdge(0);

    cout<<"Edge="<<(it->nr)<<endl;
}

void ExtGraphNodeManager_test_classes(){
    SHMemoryManager shm(100000);
    
    //setting up wrappers of SH classes
    SHNode::mm = &shm;
    SHVector::mm = &shm;
    SHVector::alloc_inst = new ShmemAllocator(shm.get_segment()->get_segment_manager());

    
    
    ExtGraphNodeManager<SHNode, SHEdge, SHVector> egnm(1000);
    
    egnm.newNode();
    egnm.newNode();
    egnm.addDEdge(0,1);
    egnm.addDEdge(0,2);
    
    cout<<egnm.reportPool(false)<<endl;
}
void test_vector_storage(){
     SHMemoryManager shm(sizeof(Node)*200000);
    Node::mm = & shm;  
    
    std::vector<Node> a;
    a.push_back(Node());
    a.push_back(Node());
    a.push_back(Node());
    
    a[1].nr=10;
    
    Node * ptr = reinterpret_cast<Node*>(&a[0]);
    cout<<((ptr+1)->nr)<<endl;
}


void GNGGraph_test1(){
    //SharedMemory Setup
    
    SHMemoryManager shm(100000);
    cout<<shm.get_name()<<endl;
    
   
    GNGNode<3>::mm = &shm;
    GNGVector::mm = &shm;
    GNGVector::alloc_inst = new ShmemAllocator(shm.get_segment()->get_segment_manager());
    
    //End of SharedMemory Setup
    
    //Easy usage
    GNGGraph<3> G(100);
    
    double pos[3]={1,2,3};
    
    G.newNode(&pos[0]);
    
    pos[1]=10;
    G.newNode(&pos[0]);
    
    G.addDEdge(0,1);
    
    cout<<G.reportPool(false)<<endl;
}